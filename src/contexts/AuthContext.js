import React, { createContext, useContext, useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

// Create auth context
const AuthContext = createContext();

// Custom hook to use the auth context
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// Provider component
export const AuthProvider = ({ children }) => {
  // State
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // For demo purposes, we'll use mock auth
  // In a real application, this would interact with a real auth API
  
  // Mock user data
  const mockUsers = [
    {
      id: 'u001',
      email: 'chad@minnewyork.com',
      password: 'password123', // In a real app, this would be hashed
      name: 'Chad CEO',
      role: 'executive',
      avatar: '/avatar-placeholder.png'
    },
    {
      id: 'u002',
      email: 'daisy@minnewyork.com',
      password: 'password123', // In a real app, this would be hashed
      name: 'Daisy Dev',
      role: 'admin',
      avatar: '/avatar-placeholder.png'
    }
  ];
  
  // Generate a mock JWT
  const generateToken = (user) => {
    // In a real app, this would be generated by the server
    // This is just for demo purposes
    const now = Date.now() / 1000; // seconds
    const expiresIn = 60 * 60; // 1 hour
    
    const payload = {
      sub: user.id,
      name: user.name,
      email: user.email,
      role: user.role,
      avatar: user.avatar,
      iat: now,
      exp: now + expiresIn
    };
    
    // This is NOT a real JWT, just a simple mock for the demo
    // In a real app, you would use a proper JWT library and a secret key
    const tokenString = btoa(JSON.stringify(payload));
    return tokenString;
  };
  
  // Mock login function
  const login = async (email, password) => {
    setError(null);
    
    try {
      // Find user by email
      const user = mockUsers.find(u => u.email === email);
      
      // Check if user exists and password matches
      if (!user || user.password !== password) {
        throw new Error('Invalid email or password');
      }
      
      // Generate token
      const token = generateToken(user);
      
      // Save token to localStorage
      localStorage.setItem('auth-token', token);
      
      // Set user state
      setUser({
        id: user.id,
        name: user.name,
        email: user.email,
        role: user.role,
        avatar: user.avatar
      });
      
      return true;
    } catch (error) {
      setError(error.message);
      return false;
    }
  };
  
  // Logout function
  const logout = () => {
    // Remove token from localStorage
    localStorage.removeItem('auth-token');
    
    // Reset user state
    setUser(null);
  };
  
  // Check if token is valid
  const isTokenValid = (token) => {
    try {
      // Decode token
      const decoded = JSON.parse(atob(token));
      
      // Check if token is expired
      return decoded.exp > Date.now() / 1000;
    } catch {
      return false;
    }
  };
  
  // Check for existing token on mount
  useEffect(() => {
    const checkAuth = () => {
      // Get token from localStorage
      const token = localStorage.getItem('auth-token');
      
      // If token exists and is valid
      if (token && isTokenValid(token)) {
        try {
          // Decode token
          const decoded = JSON.parse(atob(token));
          
          // Set user state
          setUser({
            id: decoded.sub,
            name: decoded.name,
            email: decoded.email,
            role: decoded.role,
            avatar: decoded.avatar
          });
        } catch {
          // If there's an error, clear token
          localStorage.removeItem('auth-token');
          setUser(null);
        }
      } else {
        // If no token or invalid token, clear user state
        localStorage.removeItem('auth-token');
        setUser(null);
      }
      
      // Set loading to false
      setLoading(false);
    };
    
    checkAuth();
  }, []);
  
  // For demo: auto-login as CEO
  useEffect(() => {
    // Auto login only in development and if no user is already logged in
    if (process.env.NODE_ENV === 'development' && !user && !loading) {
      login('chad@minnewyork.com', 'password123');
    }
  }, [loading]);
  
  // Context value
  const value = {
    user,
    loading,
    error,
    login,
    logout,
    isAuthenticated: !!user
  };
  
  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};